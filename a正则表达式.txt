1.元字符
.  // 匹配除换行以外的任意字符
\s // 匹配任意空白符
\w // 匹配任意字母、数字或下划线、汉字
\d // 匹配任意数字
\b // 匹配单词的开始或结束
^  // 匹配字符串的开始
$  // 匹配字符串的结束

注:  [^] 匹配任意字符

2.重复
*  // 重复零次或多次 (贪婪)
+  // 重复一次或多次  (贪婪,至少一次)
?  // 重复零次或1次  (惰性匹配)
{n} // 重复n次
{n,}  //重复n次到多次
{n,m}  // 重复n次到m次

注: 最先开始的匹配拥有最高优先级

3.反义 
\W 匹配任意非字母、数字、下划线、汉字等字符; 匹配换行空字符等
\S 匹配任意不是空白符的字符
\D 匹配任意不是数字的字符
\B 匹配不是单词开始或结束的位置
[^x] 匹配不是x意外的任意字符

4.后向引用
1).捕获 
	(exp) 捕获文本
	(?<name>exp) 捕获文本并为文本命名
	(?:exp) 不捕获文本，也不给文本分配匹配组号
2).零宽断言
	matched(?=exp)  匹配exp前面的位置
	(?<=exp)matched 匹配exp后面的位置 （js目前貌似不支持）
	matched(?!exp)  matched匹配的后面不能是exp
	(?<!exp)matched matched匹配的前面不能是exp（js目前貌似不支持）
3).注释
	(?#comment)  //不对正则表达式做任何处理
	
	
	
	
代码/语法	说明
\a	报警字符(打印它的效果是电脑嘀一声)
\b	通常是单词分界位置，但如果在字符类里使用代表退格
\t	制表符，Tab
\r	回车
\v	竖向制表符
\f	换页符
\n	换行符
\e	Escape
\0nn	ASCII代码中八进制代码为nn的字符
\xnn	ASCII代码中十六进制代码为nn的字符
\unnnn	Unicode代码中十六进制代码为nnnn的字符
\cN	ASCII控制字符。比如\cC代表Ctrl+C
\A	字符串开头(类似^，但不受处理多行选项的影响)
\Z	字符串结尾或行尾(不受处理多行选项的影响)
\z	字符串结尾(类似$，但不受处理多行选项的影响)
\G	当前搜索的开头
\p{name}	Unicode中命名为name的字符类，例如\p{IsGreek}
(?>exp)	贪婪子表达式
(?<x>-<y>exp)	平衡组
(?im-nsx:exp)	在子表达式exp中改变处理选项
(?im-nsx)	为表达式后面的部分改变处理选项
(?(exp)yes|no)	把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
(?(exp)yes)	同上，只是使用空表达式作为no
(?(name)yes|no)	如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
(?(name)yes)	同上，只是使用空表达式作为no